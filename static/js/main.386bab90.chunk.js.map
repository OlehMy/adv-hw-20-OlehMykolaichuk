{"version":3,"sources":["components/TimerDisplay.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["TimerDisplay","props","useState","time","setTime","autostart","isStart","setIsStart","useEffect","tiker","setInterval","step","onTick","convertTime","clearInterval","Math","floor","substr","className","onClick","Timer","state","console","log","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAgDeA,EA9CM,SAACC,GAAW,IAAD,EACLC,mBAASD,EAAME,MADV,mBACtBA,EADsB,KAChBC,EADgB,OAECF,mBAASD,EAAMI,WAFhB,mBAEtBC,EAFsB,KAEbC,EAFa,KAI5BC,qBAAU,WACN,IAAMC,EAAQC,aAAY,WAClBP,EAAO,GAAKG,GACZF,EAAQD,EAAOF,EAAMU,MACrBV,EAAMW,OAAOC,EAAYV,EAAOF,EAAMU,QAEtCP,EADe,IAATD,GAAcG,GAEL,IAATH,GAAeG,EADbH,EAEAF,EAAME,QAInBF,EAAMU,MACT,OAAO,WACHG,cAAcL,MAEnB,CAACN,EAAMG,EAASL,IAMnB,SAASY,EAAYV,GAGjB,OAFa,IAAOY,KAAKC,MAAMb,EAAK,MAASc,QAAQ,GAExC,KADA,KAAOd,EAAK,IAA8B,GAAvBY,KAAKC,MAAMb,EAAK,OAAYc,QAAQ,GAIxE,OACI,sBAAKC,UAAY,qBAAjB,UACI,sBAAKA,UAAY,gBAAjB,UACI,sBAAKA,UAAY,mBAAjB,UACI,uCAAS,iCAAOjB,EAAMU,KAAK,IAAlB,UACT,4CAAc,+BAAOV,EAAMI,UAAY,OAAS,gBAEpD,8BAAMQ,EAAYV,QAEtB,wBAAQgB,QAnBD,WACDZ,GAAVD,IAkBI,SAA4BA,EAAU,OAAS,cC3B5Cc,E,4MAZXC,MAAQ,G,4CAER,WACI,OACI,sBAAKH,UAAY,OAAjB,UACI,cAAC,EAAD,CAAcf,KAAQ,IAAOQ,KAAQ,IAAMN,WAAa,EAAOO,OAAQ,SAACT,GAAD,OAAUmB,QAAQC,IAAI,0FAAsBpB,MACnH,cAAC,EAAD,CAAcA,KAAQ,IAAQQ,KAAQ,IAAMN,WAAa,EAAMO,OAAQ,SAACT,GAAD,OAAUmB,QAAQC,IAAI,0FAAsBpB,a,GAP/GqB,a,MCQLC,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,OCMSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.386bab90.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst TimerDisplay = (props) => {\r\n    const[time, setTime] = useState(props.time);\r\n    const[isStart, setIsStart] = useState(props.autostart);\r\n\r\n    useEffect(() => {\r\n        const tiker = setInterval(() => {\r\n            if (time > 0 && isStart) {\r\n                setTime(time - props.step);\r\n                props.onTick(convertTime(time - props.step));\r\n            }else if (time === 0 && isStart) {\r\n                setTime(time);\r\n            }else if (time === 0 && !isStart) {\r\n                setTime(props.time)\r\n            }else {\r\n                setTime(time)\r\n            }\r\n        }, props.step)\r\n        return(() => {\r\n            clearInterval(tiker)\r\n        })\r\n    }, [time, isStart, props])\r\n\r\n    const toggle = () => {       \r\n        isStart ? setIsStart(false) : setIsStart(true);\r\n    }\r\n\r\n    function convertTime(time) {\r\n        const min = ('0' + (Math.floor(time/60000))).substr(-2);\r\n        const sec = ('0' + (time/1000 - Math.floor(time/60000)*60)).substr(-2);\r\n        return min + ':' + sec;\r\n    }\r\n\r\n    return (\r\n        <div className = \"timer-wrapper flex\">\r\n            <div className = \"timer-display\">\r\n                <div className = \"output-data flex\">\r\n                    <p>Step: <span>{props.step/1000}s</span></p>\r\n                    <p>Autostart: <span>{props.autostart ? 'true' : 'false'}</span></p>\r\n                </div>\r\n                <div>{convertTime(time)}</div>\r\n            </div>\r\n            <button onClick = {toggle}>{isStart ? 'Stop' : 'Start'}</button>\r\n        </div>             \r\n    );    \r\n}\r\n \r\nexport default TimerDisplay;","import React, { Component } from 'react';\r\nimport TimerDisplay from './TimerDisplay';\r\n\r\nclass Timer extends Component {\r\n    state = {}\r\n    \r\n    render() { \r\n        return (\r\n            <div className = \"flex\">\r\n                <TimerDisplay time = {30000} step = {1000} autostart = {false} onTick={(time) => console.log(\"Залишилось часу: \" + time)}/>\r\n                <TimerDisplay time = {600000} step = {2000} autostart = {true} onTick={(time) => console.log(\"Залишилось часу: \" + time)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import Timer from './components/Timer';\nimport './components/style.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}